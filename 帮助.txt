#——MCPYAPI——
mc.runcmd(cmd)											
//执行后台命令
mc.logout(msg)											
//向控制台输出
mc.getOnLinePlayers()									
//获取在线玩家
mc.getPlayerAbilities(uuid)								
//获取uuid对应玩家能力表
mc.getPlayerAttributes(uuid)							
//获取uuid对应玩家属性表
mc.getPlayerEffects(uuid)								
//获取uuid对应玩家所有效果表
mc.getscoreboard(uuid,scoreboardname)					
//获取对应uuid玩家特定计分板的数值
mc.addPlayerItem(uuid,id,aux ,count)					
//为uuid对应玩家添加特定物品id和特定特殊值的物品count个
mc.setCommandDescribe(key,descripition)					
//设置一个描述为description的key指令
mc.teleport(uuid,x,y,z,did)								
//传送uuid对应玩家到did维度的x,y,z处
mc. setPlayerBossBart(uuid,title,percent)			
//设置uuid对应玩家标题为title，血条百分比为percent的boss血条
mc.setPlayerSidebar(uuid,title,list)				
//设置uuid对应玩家侧边栏，标题为title，内容为json格式的list
mc.getPlayerItems(uuid)									
//获取uuid对应玩家物品
mc.setPlayerPermissionAndGametype(uuid, modes)			
//设置uuid对应玩家新游戏与权限模式
mc.disconnectClient(uuid,tips)							
//强制断开uuid对应玩家连接
mc.transferserver(uuid, addr, port)					
//传送uuid对应玩家到IP为addr的服务器port端口
mc.getPlayerMaxAttributes(uuid)							
//获取uuid对应玩家最大能力表
mc.tellraw(player,msg)
//向对应玩家发送msg信息
mc.talkAs(uuid,msg)
//模拟uuid对应玩家说一句话
mc.getPlayerMaxAttributes(uuid)	
//获取uuid对应玩家最大能力表
mc.sendSimpleForm(uuid,title,contest,buttons)
//向uuid对应玩家发送一个简单的表单，返回表单id
mc.releaseForm(formid)
//放弃一个id为formid的表单
mc.removePlayerBossBar(uuid)
//清除uuid对应玩家boss血条
mc.removePlayerSidebar(uuid)
//清除uuid对应玩家侧边栏
mc.sendCustomForm(uuid,json)
//向uuid对应玩家发送一个自定义表单，返回表单id
mc.sendModalForm(uuid, title, contest, button1,button2)
//向uuid对应玩家发送一个模式对话框，返回表单id

#——Listeners——
load_name
//xuid —— 玩家对应xuid
//uuid ——玩家对应uuid
//playername —— 玩家名称
player_left
//xuid —— 玩家对应xuid
//uuid ——玩家对应uuid
//playername —— 玩家名称
server_command
//cmd —— 后台输入的指令
attack 
//actorname —— 被攻击实体名称
//dimensionid —— 玩家所在维度ID
//XYZ —— 玩家所处位置
inputtext
//msg —— 输入的文本
//dimensionid —— 玩家所在维度ID
//XYZ —— 玩家所在位置
destroyblock 
//blockid —— 方块id
//XYZ —— 玩家所在位置
//position —— 方块所在位置
//blockname —— 方块名称
mobdie
//scrname —— 伤害源名称
//mobname —— 实体名称
//dimensionid —— 生物所在维度ID
//playername —— 若为玩家死亡则附带此项
respawn
//XYZ —— 玩家所在位置
//dimensionid —— 玩家所在维度ID
//playername —— 玩家名称
inputcommand 
//cmd —— 玩家输入的指令
//dimensionid —— 玩家所在维度ID
//playername —— 玩家名称
//XYZ —— 玩家所在位置
equippedarm
//itemid —— 物品id
//itemcount —— 物品数量
//itemname —— 物品名字
//itemaux —— 物品特殊值
//solt —— 操作格子
//XYZ —— 玩家所在位置
formselect
//formid —— 表单id
//selected —— 选择项
//uuid —— 玩家uuid
//playername —— 玩家名称

#——调用外部库的方法——
//首先引用clr
import clr

//然后引用要调用的库，库要与bds在同级目录
//name是不带".dll"的类库名称
clr.AddReference(name)

//然后从类库的命名空间中引用类
//namespace为类库内部命名空间
//class为要调用的类
from namespace import class

//然后定义一个方法来调用类
//obj是自定义的，什么都行
//class是你引用的类，有的类可能需要带参
obj = class()

//然后就可以调用了，比如我要调用class下的Write方法
obj.Write("awa")


#——编写注意事项——

所有要在地图加载前完成的事请写在load_plugin函数中，
包括加载成功的提示和注册指令等等。

load_plugin函数是必须的，如果没有这个函数，
ipyr不会加载这个插件。

mc并不是一个模块，请不要import mc
或者from mc import *
这些都会报错
mc这个类只存在于ipyr中，离线调试器读取到mc会直接报错。

在监听器中，如果不拦截事件，请不要return
就算是true也不行，只有需要拦截的时候才需要return

#!编写日期 : 2020/11/20
